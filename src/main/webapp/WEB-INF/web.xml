<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" version="4.0">
   <!--[옵션] ========================================================= -->
   <!-- 
   1) WAS가 web.xml의 listener 태그를 해석할 때 ContextLoaderLister 객체 생성
   2) ContextLoaderLister 객체는 내부에 Root WebApplicationContext 생성 
   3) Root WebApplicationContext는 관리할 객체(빈)의 설정 파일의 경로를 param-value 태그에서 찾음
   -->
   <listener>
      <listener-class>
         org.springframework.web.context.ContextLoaderListener
      </listener-class>
   </listener>
   <context-param>
      <param-name>contextConfigLocation</param-name>
      <!-- classpath는 WAR 파일내부의 WEB-INF/classes 폴더를 말함 -->
      <!-- src/main/java, src/main/resources 폴더의 내용들이 취합되어 classes에 들어감 -->
      <param-value>classpath:spring/root/*.xml</param-value>
      <!-- <param-value>/WEB-INF/spring/root/*.xml</param-value> -->
   </context-param>
   <!--  ============================================================ -->
   
   
   <!--[필수] ========================================================= -->
   <!-- 
   1) WAS가 web.xml의 servlet 태그를 해석할 때 DispatcherServlet 객체 생성
   2) DispatcherServlet 객체는 내부에 WebApplicationContext 생성 
   3) WebApplicationContext는 관리할 객체(빈)의 설정 파일의 경로를 param-value 태그에서 찾음
    -->
   <servlet>
      <servlet-name>dispatcher</servlet-name>
      <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
      <init-param>
         <param-name>contextConfigLocation</param-name>	<!-- 예약어로 작성 -->
         <!-- classpath는 WAR 파일내부의 WEB-INF/classes 폴더를 말함 -->
         <!-- src/main/java, src/main/resources 폴더의 내용들이 취합되어 classes에 들어감 -->
         <param-value>classpath:spring/dispatcher/*.xml</param-value>
         <!-- <param-value>/WEB-INF/spring/dispatcher/*.xml</param-value> -->
      </init-param>
      
      <init-param>
      	<!-- 요청매핑 메소드를 찾을 수 없을 때  -->
      	<param-name>throwExceptionIfNoHandlerFound</param-name>
      	<param-value>true</param-value>
      </init-param>
      <load-on-startup>1</load-on-startup>
      
      <!-- multipart/form-data를 해석하기 위한 설정 --> 
      <multipart-config>
      	<location>C:/Temp</location>	<!-- 임시파일 폴더 -->
      	<max-file-size>20971520</max-file-size>	<!-- 20MB / 1개의 파일당 최대크기 -->
      	<max-request-size>104857600</max-request-size>	<!-- 전체요청의 크기 (문자파트의 크기 + 모든 파일 크기[max-file-size*파일업로드 가능 갯수]...)-->
      	<file-size-threshold>1024</file-size-threshold>	<!-- byte 단위 -->
      	<!-- 파일의 크기가 fize-size-threshold 값 이하라면 임시파일을 생성하지 않고 메모리에서 즉시 파일을 읽어서 생성할 수 있음-->
      </multipart-config>
   </servlet>
   <!--
   4) 브라우저(클라이언트)가 요청하는 모든 URL을 DispatcherServlet이 처리하도록 설정
   -->
   <servlet-mapping>
      <servlet-name>dispatcher</servlet-name>
      <url-pattern>/</url-pattern>
   </servlet-mapping>
   <!--  ============================================================ -->
   
  
    <!--[필수] ========================================================= -->
    <!-- Filter의 역할: DispatcherServlet이 실행되기 전에 '전처리'하는 역할
    characterEncodingFilter의 역할: DispatcherServlet이 실행되기 전에 한글 데이터를 복원
     -->
    <filter>
    	<filter-name>characterEncodingFilter</filter-name>
    	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    	<init-param>
    		<param-name>encoding</param-name>
    		<param-value>UTF-8</param-value>
    	</init-param>
    </filter>
    <!-- 
    	브라우저(클라이언트)가 요청하는 모든 URL에 대해서 CharacterEncodingFilter가 동작하도록 설정
     -->
    <filter-mapping>
    	<filter-name>characterEncodingFilter</filter-name>
    	<url-pattern>/*</url-pattern>
    </filter-mapping>
    <!--  ============================================================ -->
   
   <!-- 로그인을 체크하는 필터 등록: 코드가 선언된 순으로 필터들 동작 -->
   <!-- 
   <filter>
	   	<filter-name>LoginCheckFilter</filter-name>
	   	<filter-class>com.mycompany.springframework.filter.LoginCheckFilter</filter-class>
   </filter>
   <filter-mapping>
    	<filter-name>LoginCheckFilter</filter-name>
    	<url-pattern>/*</url-pattern>
    </filter-mapping> 
    -->
    
    <!-- <error-page>
    	<error-code>404</error-code>
    	<location>/WEB-INF/views/ch10/404.jsp</location>
    </error-page> -->
</web-app>